// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetApiAuthData, GetCategoryTreeData, GetCategoryTreeResponse, GetCategoryTreeError, CreateCategoryData, CreateCategoryResponse, CreateCategoryError, DeleteCategoryData, DeleteCategoryError, GetCategoryData, GetCategoryResponse, GetCategoryError, RenameCategoryData, RenameCategoryError, SetCategoryParentData, SetCategoryParentError, GetStorageTypesData, GetStorageTypesResponse, GetStorageTypesError, CreateStorageTypeData, CreateStorageTypeResponse, CreateStorageTypeError, GetStoragesData, GetStoragesResponse, GetStoragesError, CreateStorageData, CreateStorageResponse, CreateStorageError, GetRootStorageData, GetRootStorageResponse, GetRootStorageError, GetStorageData, GetStorageResponse, GetStorageError, GetStorageBySlugData, GetStorageBySlugResponse, GetStorageBySlugError, CreateItemData, CreateItemResponse, CreateItemError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

export const getApiAuth = <ThrowOnError extends boolean = false>(options: Options<GetApiAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/auth',
        ...options
    });
};

export const getCategoryTree = <ThrowOnError extends boolean = false>(options?: Options<GetCategoryTreeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoryTreeResponse, GetCategoryTreeError, ThrowOnError>({
        url: '/api/categories',
        ...options
    });
};

export const createCategory = <ThrowOnError extends boolean = false>(options?: Options<CreateCategoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCategoryResponse, CreateCategoryError, ThrowOnError>({
        url: '/api/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteCategory = <ThrowOnError extends boolean = false>(options: Options<DeleteCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteCategoryError, ThrowOnError>({
        url: '/api/categories/{id}',
        ...options
    });
};

export const getCategory = <ThrowOnError extends boolean = false>(options: Options<GetCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryResponse, GetCategoryError, ThrowOnError>({
        url: '/api/categories/{id}',
        ...options
    });
};

export const renameCategory = <ThrowOnError extends boolean = false>(options: Options<RenameCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, RenameCategoryError, ThrowOnError>({
        url: '/api/categories/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const setCategoryParent = <ThrowOnError extends boolean = false>(options: Options<SetCategoryParentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, SetCategoryParentError, ThrowOnError>({
        url: '/api/categories/{id}/setParent/{parentId}',
        ...options
    });
};

export const getStorageTypes = <ThrowOnError extends boolean = false>(options?: Options<GetStorageTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStorageTypesResponse, GetStorageTypesError, ThrowOnError>({
        url: '/api/storageTypes',
        ...options
    });
};

export const createStorageType = <ThrowOnError extends boolean = false>(options?: Options<CreateStorageTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateStorageTypeResponse, CreateStorageTypeError, ThrowOnError>({
        url: '/api/storageTypes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getStorages = <ThrowOnError extends boolean = false>(options?: Options<GetStoragesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStoragesResponse, GetStoragesError, ThrowOnError>({
        url: '/api/storages',
        ...options
    });
};

export const createStorage = <ThrowOnError extends boolean = false>(options?: Options<CreateStorageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateStorageResponse, CreateStorageError, ThrowOnError>({
        url: '/api/storages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getRootStorage = <ThrowOnError extends boolean = false>(options?: Options<GetRootStorageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRootStorageResponse, GetRootStorageError, ThrowOnError>({
        url: '/api/storages/root',
        ...options
    });
};

export const getStorage = <ThrowOnError extends boolean = false>(options: Options<GetStorageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStorageResponse, GetStorageError, ThrowOnError>({
        url: '/api/storages/{id}',
        ...options
    });
};

export const getStorageBySlug = <ThrowOnError extends boolean = false>(options: Options<GetStorageBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStorageBySlugResponse, GetStorageBySlugError, ThrowOnError>({
        url: '/api/storages/slug/{slug}',
        ...options
    });
};

export const createItem = <ThrowOnError extends boolean = false>(options?: Options<CreateItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateItemResponse, CreateItemError, ThrowOnError>({
        url: '/api/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};